{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 CG Times;}{\f13\fswiss\fcharset0\fprq2 Univers;}{\f14\fswiss\fcharset0\fprq2 Univers Condensed;}{\f15\fswiss\fcharset0\fprq2 Antique Olive;}
{\f16\fswiss\fcharset0\fprq2 Albertus Medium;}{\f17\fswiss\fcharset0\fprq2 Albertus Extra Bold;}{\f18\fmodern\fcharset0\fprq1 Letter Gothic;}{\f19\fnil\fcharset2\fprq2 Wingdings;}{\f20\fnil\fcharset2\fprq2 Marlett;}
{\f21\fmodern\fcharset0\fprq1 Lucida Console;}{\f22\fswiss\fcharset0\fprq2 Tahoma;}{\f23\fswiss\fcharset0\fprq2 Arial Black;}{\f24\fscript\fcharset0\fprq2 Comic Sans MS;}{\f25\fswiss\fcharset0\fprq2 Impact;}{\f26\fswiss\fcharset0\fprq2 Verdana;}
{\f27\froman\fcharset2\fprq2 Webdings;}{\f28\froman\fcharset0\fprq2 Georgia;}{\f29\fswiss\fcharset0\fprq2 Trebuchet MS;}{\f30\fmodern\fcharset0\fprq1 Andale Mono;}{\f31\fmodern\fcharset2\fprq1 MS LineDraw;}{\f32\fdecor\fcharset0\fprq2 Algerian;}
{\f33\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f34\froman\fcharset0\fprq2 Bookman Old Style;}{\f35\fdecor\fcharset0\fprq2 Braggadocio;}{\f36\fswiss\fcharset0\fprq2 Britannic Bold;}{\f37\fscript\fcharset0\fprq2 Brush Script MT;}
{\f38\fswiss\fcharset0\fprq2 Century Gothic;}{\f39\fdecor\fcharset0\fprq2 Colonna MT;}{\f40\fdecor\fcharset0\fprq2 Desdemona;}{\f41\froman\fcharset0\fprq2 Footlight MT Light;}{\f42\fdecor\fcharset0\fprq2 Kino MT;}{\f43\froman\fcharset0\fprq2 Wide Latin;}
{\f44\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f45\fdecor\fcharset0\fprq2 Playbill;}{\f46\fmodern\fcharset255\fprq2 Modern;}{\f47\fswiss\fcharset0\fprq1 MS Dialog;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f4\fs20\lang1031 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\creatim\yr2002\mo6\dy27\hr23\min53}{\printim\yr2006\mo6\dy27\hr9\min3}{\version1}{\edmins0}{\nofpages0}
{\nofwords0}{\nofchars0}{\vern49213}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1134 \deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\formshade \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \f4\fs20\lang1031 {\f3\fs18 
\par }\pard {\f3\fs18 
\par 
\par 
\par 
\par 
\par                          TASM USER'S MANUAL
\par 
\par 
\par       TASM - A Table Driven Cross Assembler for the MSDOS* Environment
\par 
\par 
\par 
\par 
\par 
\par                            Thomas N. Anderson
\par                      Speech Technology Incorporated
\par                 837 Front Street South, Issaquah, WA   98027
\par 
\par 
\par                              March, 1992
\par                              Version 2.9
\par 
\par [Speech Technology Incorporated  manufactures electronic devices  to aid  the
\par visually impaired employing digital speech synthesis technology.]
\par 
\par 
\par TASM software is Copyright (C)  1985-1992 by Speech Technology  Incorporated.
\par All rights reserved.
\par 
\par This document is Copyright (C)  1985-1992 by Speech Technology  Incorporated.
\par All rights reserved.  Permission is granted to copy this document and related
\par software except  for  the source  code.    The source  code,  distributed  to
\par registered users, may be copied for the sole use of the registered user.
\par 
\par 
\par 
\par 
\par  * MSDOS is a trademark of Microsoft Corporation.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 2
\par }\pard {\f3\fs18 
\par TABLE OF CONTENTS
\par 
\par SECTION                                             PAGE
\par ______________________________________________________________________
\par INTRODUCTION                                           4
\par INVOCATION                                             5
\par  File Names                                            5
\par  Option: a - Assembly Control                          6
\par  Option: b - Binary Object Format                      7
\par  Option: c - Contiguous Block Output                   7
\par  Option: d - Define a Macro                            7
\par  Option: e - Expand Source                             7
\par  Option: f - Fill Memory                               7
\par  Option: g - Object File Format                        7
\par  Option: h - Hex Object Code Table                     7
\par  Option: i - Ignore Case in Labels                     8
\par  Option: l - Label Table                               8
\par  Option: m - MOS Technology Object Format              8
\par  Option: o - Set Number of Bytes per Object Record     8
\par  Option: p - Page Listing File                         8
\par  Option: q - Disable Listing File                      8
\par  Option: r - Set Read Buffer Size                      8
\par  Option: s - Enable Symbol File Generation             9
\par  Option: t - Table Name                                9
\par  Option: x - Enable Extended Instruction Set          10
\par  Option: y - Enable Assembly Timing                   10
\par ENVIRONMENT VARIABLES                                 11
\par  TASMTABS                                             11
\par  TASMOPTS                                             11
\par EXIT CODES                                            11
\par SOURCE FILE FORMAT                                    12
\par EXPRESSIONS                                           13
\par  Labels                                               13
\par  Numeric Constants                                    13
\par  Character Constants                                  14
\par  String Constants                                     14
\par  Location Counter Symbol                              14
\par  Operators                                            15
\par ASSEMBLER DIRECTIVES                                  17
\par  ADDINSTR                                             17
\par  AVSYM                                                17
\par  BLOCK                                                17
\par  BSEG/CSEG/DSEG/NSEG/XSEG                             17
\par  BYTE                                                 17
\par  CHK                                                  18
\par  CODES/NOCODES                                        18
\par  DB                                                   18
\par  DW                                                   18
\par  DEFINE                                               18
\par  DEFCONT                                              19
\par  EJECT                                                19
\par  ELSE                                                 20
\par  END                                                  20
\par  ENDIF                                                20
\par  EQU                                                  20
\par  EXPORT                                               21
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 3
\par }\pard {\f3\fs18 
\par  IFDEF                                                21
\par  IFNDEF                                               21
\par  IF                                                   22
\par  INCLUDE                                              22
\par  LIST/NOLIST                                          22
\par  LOCALLABELCHAR                                       22
\par  LSFIRST/MSFIRST                                      22
\par  ORG                                                  22
\par  PAGE/NOPAGE                                          23
\par  SET                                                  23
\par  SYM/AVSYM                                            23
\par  TEXT                                                 24
\par  TITLE                                                25
\par  WORD                                                 26
\par OBJECT FILE FORMATS                                   27
\par  Intel Hex Object Format                              27
\par  MOS Technology Hex Object Format                     28
\par  Motorola Hex Object Format                           28
\par  Binary Object Format                                 28
\par LISTING FILE FORMAT                                   30
\par PROM PROGRAMMING                                      31
\par ERROR MESSAGES                                        32
\par BUGS AND LIMITATIONS                                  35
\par 
\par APPENDIX A - ORDERING INFORMATION                     36
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 4
\par }\pard {\f3\fs18 
\par INTRODUCTION
\par 
\par 
\par TASM is a table driven cross assembler for the MS-DOS environment.   Assembly
\par source code, written in the appropriate dialect (generally very close to  the
\par manufacturers assembly  language),  can  be  assembled  with  TASM,  and  the
\par resulting object code  transferred to  the target  microprocessor system  via
\par PROM or other mechanisms.
\par 
\par The current microprocessor families supported by TASM are:
\par 
\par         6502                       8048
\par         6800/6801/68HC11           8051
\par         6805                       8080/8085
\par         TMS32010/TMS320C25         Z80
\par         TMS7000
\par 
\par The user  so  inclined  may  build  tables  for  other  microprocessors.  The
\par descriptions of the various existing tables and instructions on building  new
\par tables are not in this document but can be found in the TASMTABS.DOC file  on
\par the TASM distribution disk.
\par 
\par TASM characteristics include:
\par 
\par   1.  Powerful expression parsing (17 operators).
\par   2.  Supports a subset of the 'C' preprocessor commands.
\par   3.  Macro capability (through use of DEFINE directive).
\par   4.  Multiple statements per line.
\par   5.  Four object file formats:
\par           Intel hex, MOS Technology hex, Motorola hex, binary.
\par   6.  Absolute code generation only.
\par   7.  Source code available (in C).
\par   8.  Uniform syntax  across  versions  for  different  target machines.
\par   9.  Features in support of PROM programming (preset memory,
\par           contiguous block).
\par   10. Supports extended instructions for many of the supported
\par           microprocessor families.
\par   11. Tables read at run time; single TASM executable for all table versions.
\par   12. Symbol table export for inclusion in subsequent assemblies.
\par   13. Symbol table export file compatible with the Avocet 8051
\par           simulator (.SYM format).
\par 
\par SHAREWARE
\par 
\par TASM is distributed  as shareware.    TASM is  not public domain.   The  TASM
\par distribution files may be freely copied (excluding the source code files) and
\par freely used for the purpose of evaluating the suitability of TASM for a given
\par purpose.   Use  of  TASM  beyond  a  reasonable  evaluation  period  requires
\par registration.   Prolonged use without registration is unethical.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 5
\par }\pard {\f3\fs18 
\par INVOCATION
\par 
\par TASM can be invoked as follows  (optional fields shown in brackets,  symbolic
\par fields in italics):
\par 
\par     tasm -pn [-option_flag ...] src_file
\par                            [obj_file [lst_file [exp_file [sym_file]]]]
\par 
\par     Where  option_flag can be one or more of the following:
\par 
\par         -table        Specify version (table = table designation)
\par         -ttable       Table (alternate form of above)
\par         -aamask       Assembly control (optional error checking)
\par         -b            Produce object in binary (.COM) format
\par         -c            Object file written as a contiguous block
\par         -dmacro       Define a macro (or just a macro label)
\par         -e            Show source lines after macro expansion
\par         -ffillbyte    Fill entire memory space with fillbyte (hex)
\par         -gobjtype     Object file (0=Intel, 1=MOS Tech, 2=Motorola, 3=binary)
\par         -h            Produce hex table of the assembled code (in list file)
\par         -i            Ignore case for labels
\par         -l[al]        Produce a label table in the listing
\par         -m            Produce object in MOS Technology format
\par         -oobytes      Bytes per object record (for hex obj formats)
\par         -p[lines]     Page the listing file (lines per page. default=60)
\par         -q            Quiet, disable the listing file
\par         -rkb          Set read buffer size in Kbytes (default 2 Kbytes)
\par         -s            Write a symbol table file
\par         -x[xmask]     Enable extended instruction set (if any)
\par         -y            Time the assembly
\par 
\par The file parameters are defined as follows:
\par 
\par src_file  Source file name
\par obj_file  Object code file name
\par lst_file  Listing file name
\par exp_file  Symbol export file (only if the EXPORT directive is used).
\par sym_file  Symbol table file
\par               (only if the "-s" option or the SYM/AVSYM directives are used).
\par 
\par The source  file  must be  specified.   If  not,  some usage  information  is
\par displayed.  Default file names for all the other files are generated if  they
\par are not explicitly  provided.  The  filename is formed  by taking the  source
\par filename and changing the extension to one of the following:
\par 
\par Extension           File type
\par ________________________________________________________
\par .OBJ                Object file
\par .LST                Listing file
\par .EXP                Symbol export file
\par .SYM                Symbol table  file
\par 
\par TASM has  no built-in  instruction set  tables.   Instruction set  definition
\par files are read at run time.  TASM determines which table to use based on  the
\par '-table' field shown  above.  For  example, to  assemble the code  in a  file
\par called source.asm, one would enter:
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 6
\par }\pard {\f3\fs18 
\par         tasm -48   source.asm            for an 8048 assembly
\par         tasm -65   source.asm            for a  6502 assembly
\par         tasm -51   source.asm            for an 8051 assembly.
\par         tasm -85   source.asm            for an 8085 assembly.
\par         tasm -80   source.asm            for a  Z80  assembly.
\par         tasm -05   source.asm            for a  6805 assembly.
\par         tasm -68   source.asm            for a  6800/6801/68HC11 assembly.
\par         tasm -70   source.asm            for a  TMS7000  assembly.
\par         tasm -3210 source.asm            for a  TMS32010 assembly.
\par         tasm -3225 source.asm            for a  TMS320C25 assembly.
\par 
\par The file name that the  tables are read from is  formed by taking the  digits
\par specified after the '-' and appending it to 'TASM' then appending the  '.TAB'
\par extension.  Thus, the '-48' flag would cause  the tables to be read from  the
\par file 'TASM48.TAB'.
\par 
\par It is possible to designate  tables by non numeric  part numbers if the  '-t'
\par flag is used.  For  example, if a user built  a table called TASMF8.TAB  then
\par TASM could be invoked as follows:
\par 
\par         tasm -tf8 source.asm
\par 
\par Each option flag must be  preceded by a dash.   Options need not precede  the
\par file names, however.  The various options are described below:
\par 
\par a  -  Assembly  Control.  TASM  can  provide  additional  error  checking  by
\par specifying the '-a' option at the time of execution.  If the '-a' is provided
\par without a digit following, then all the available error checking is done.  If
\par a digit follows, then it is used as  a mask to determine the error checks  to
\par be made.  The bits of the mask are defined as follows:
\par 
\par Bit    Option Flag   Description
\par ___________________________________________________________________________
\par 0      -a1           Check for apparent illegal use of indirection
\par 1      -a2           Check for unused data in the arguments
\par 2      -a4           Check for duplicate labels
\par 3      -a8           Check for non-unary operators at start of expression.
\par 4      -a10          Check for 8051 AJMP/ACALL branches off current 2K page.
\par 
\par Combinations of the above bits  can also be used.   For example, '-a5'  would
\par enable the checking for illegal indirection and duplicate labels.
\par 
\par Illegal indirection applies to micros that use parenthesis around an argument
\par to indicate indirection.  Since  it is always legal to  put an extra pair  of
\par parenthesis around  any  expression  (as  far as  the  expression  parser  is
\par concerned), the user may think that  he/she is indicating indirection for  an
\par instruction that has no  indirection and TASM would  not complain.   Enabling
\par this checking will  result in an  error message (warning)  whenever an  outer
\par pair of parenthesis is used and the instruction set definition table does not
\par explicitly indicate that to be a valid form of addressing.
\par 
\par Unused data in  arguments applies to  cases where  a single byte  of data  is
\par needed from an  argument, but  the argument contains  more than  one byte  of
\par data.  If  a full  sixteen bit address  is used  in a  'Load Immediate'  type
\par instruction that needs  only a  single byte,  for example,  an error  message
\par would be generated.  Here is an example (6502 code):
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 7
\par }\pard {\f3\fs18 
\par 0001   1234                    .org $1234
\par tasm: Unused data in MS byte of argument.  Line 0002 in test.asm
\par 0002   1234 A9 34       start  lda  #start
\par 
\par To make the above checks occur whenever  you do an assembly, add a line  like
\par this to your AUTOEXEC.BAT file:
\par 
\par         SET TASMOPTS=-a
\par 
\par b  -  Binary Object Format. This option causes the object file to be  written
\par in binary  - one  byte for  each byte  of code/data.   Note  that no  address
\par information is included in  the object file in  this format.  The  contiguous
\par block (-c) output mode is forced when  this option is invoked.  This flag  is
\par equivalent to '-g3'.
\par 
\par c - Contiguous Block Output. If this  option is specified, then all bytes  in
\par the range from the  lowest used byte  to the highest will  be defined in  the
\par object file.  Normally, with the default Intel Hex object format enabled,  if
\par the Program Counter  (PC) jumps  forward because  of an  .ORG directive,  the
\par bytes skipped over will not have any value assigned them in the object  file.
\par With this option enabled, no output to  the object file occurs until the  end
\par of the assembly at  which time the whole  block is written.   This is  useful
\par when using TASM to  generate code that will  be put into a  PROM so that  all
\par locations will have a known value.  This option is often used in  conjunction
\par with the -f option to ensure all unused bytes will have a known value.
\par 
\par d - Define  a Macro.  Macros are  defined on  the command  line generally  to
\par control the assembly of various IFDEF's that are  in the source  file.   This
\par is a convenient way to generate various versions of object code from a single
\par source file.
\par 
\par e - Expand Source. Normally TASM shows lines in the listing file just as they
\par are in the source file.  If macros  are in use (via the DEFINE directive)  it
\par is sometimes desirable to see the source lines after expansion.  Use the '-e'
\par flag to accomplish this.
\par 
\par f   -   Fill   Memory.   This   option   causes the  memory image  that  TASM
\par maintains to be initialized to the value specified by the two hex  characters
\par immediately following the 'f'.  TASM maintains a memory image that is a  full
\par 64K bytes in size (even if the  target processor cannot  utilize that  memory
\par space).  Invocation of this option introduces a delay at start up of up to  2
\par seconds (time required to initialize all 64K bytes).
\par 
\par g -  Object File  Format. TASM  can generate  object code  in four  different
\par formats as indicated below:
\par 
\par         -g0    for Intel hex (default)
\par         -g1    for MOS Technology hex (same as -m)
\par         -g2    for Motorola hex
\par         -g3    for binary (same as -b)
\par 
\par The '-m' and '-b' flags may also be used, as indicated above.
\par 
\par See the section on OBJECT FILE FORMATS for descriptions of each of the above.
\par 
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 8
\par }\pard {\f3\fs18 
\par h - Hex Object  Code Table. This option  causes a hex  table of the  produced
\par object code to  appear in the  listing file.   Each line of  the table  shows
\par sixteen bytes of code.
\par 
\par 
\par i - Ignore Case in Labels.  TASM is normally case sensitive when dealing with
\par labels.  For  those that  prefer case  insensitivity, the  '-i' command  line
\par option can be employed.
\par 
\par l - Label Table.  This option causes  a label table to appear in the  listing
\par file.  Each  label is shown  with its corresponding  value. Macro labels  (as
\par established via the DEFINE directives) do not appear.
\par 
\par Two optional suffixes may follow the '-l' option:
\par 
\par         Suffix          Description
\par         _______________________________________________
\par         l               Use long form listing
\par         a               Show all labels (including local labels)
\par 
\par The suffix should immediately follow the '-l'.  Here are some examples:
\par 
\par         -l      to show non-local labels in the short form
\par         -la     to show all labels in the short form
\par         -ll     to show non-local labels in the long form
\par         -lal    to show all labels in the long form
\par 
\par 
\par m - MOS Technology Object  Format. This option causes  the object file to  be
\par written in  MOS Technology  hex  format rather  than  the default  Intel  hex
\par format.  See section on OBJECT FILE FORMATS for a description of the format.
\par 
\par o - Set Number of Bytes per Object Record.  When  generating  object code  in
\par either the MOS Technology format  or the Intel hex format,   a default of  24
\par (decimal) bytes of object are defined on each  record. This can be altered by
\par invoking the '-o' option  immediately followed by   two  hex digits  defining
\par the number of bytes per record desired. For example,  if 32 bytes per  record
\par are desired,  one might  invoke TASM as:
\par 
\par         TASM -48 -o20 source.asm
\par 
\par p - Page Listing  File. This option  causes the listing file  to have top  of
\par page headers and form  feeds inserted at  appropriate intervals (every  sixty
\par lines of output).  To override the default of sixty lines per page,  indicate
\par the desired number of lines per page as a decimal number immediatly following
\par the '-p'.  Here is an example:
\par 
\par         TASM -48 -p56 source.asm
\par 
\par q - Disable Listing File.  This option causes all output to the listing  file
\par to be  suppressed, unless a .LIST directive is encountered in the source file
\par (see LIST/NOLIST directives).
\par 
\par r - Set Read Buffer Size. This option overrides the default read buffer  size
\par of 2 Kbytes.  The first hexadecimal digit immediately after the 'r' is  taken
\par as the  number of  K  bytes to  allocate for  the  read buffer  (.e.g.  '-r8'
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                              Page 9
\par }\pard {\f3\fs18 
\par indicates an 8K byte buffer, '-rf' indicates  a 15K byte buffer).  Note  that
\par that read buffers are  taken from the  same memory pool  as labels and  macro
\par storage, and that additional read buffers are needed if "includes" are  used.
\par Thus, using 8K byte buffers may be suitable for most assemblies, but programs
\par with large numbers of symbols may not allow such a value.  Also, reducing the
\par buffer size  to 1  Kbyte can  increase the  memory pool  available for  label
\par storage, if such is needed.
\par 
\par s - Enable Symbol File Generation.    If this flag  is set, a symbol file  is
\par generated at the end of the assembly.  The format of the file is one line per
\par label, each label starts in the first  column and is followed by white  space
\par and then four hexadecimal digits representing the  value of the label.    The
\par following illustrates the format:
\par 
\par         label1         FFFE
\par         label2         FFFF
\par         label3         1000
\par 
\par The symbol  file name  can be  provided as  the fifth  file name  on the  the
\par command line, or the name will be generated from the source file name with  a
\par '.SYM' extension.  The symbol table file  can also be  generated by  invoking
\par the SYM directive.  The AVSYM directive also generates the symbol file but in
\par a different format (see section on ASSEMBLER DIRECTIVES).
\par 
\par t - Table Name.  As an alternative to specifying the instruction set table as
\par two decimal digits, the table indication may be preceeded by the '-t' option.
\par This is useful if the desired table name starts with a non-numeric.  Thus,  a
\par table for an F8 might be selected as:
\par 
\par         TASM -tf8 source.asm
\par 
\par TASM would expect to read the  instruction set definition tables from a  file
\par named TASMF8.TAB.
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 10
\par }\pard {\f3\fs18 
\par 
\par x - Enable Extended Instruction Set.  If a processor family has  instructions
\par that are valid for only  certain members, this option  can be used to  enable
\par those beyond the basic standard instruction set.  A hex digit may follow  the
\par 'x' to indicate a  mask value used in  selecting the appropriate  instruction
\par set.  Bit 0 of the mask selects the basic instruction set, thus a '-x1' would
\par have  no  effect.    A  '-x3'  would  enable  the  basic  set  plus  whatever
\par instructions have bit  1 set in  their class mask.   A '-x'  without a  digit
\par following is equivalent to a '-xf' which sets all four of the mask bits.  The
\par following table indicates the current extended instruction sets available  in
\par the TASM tables:
\par 
\par Base   Base           Extension 1   Extension 2  Extension 3    Extension 4
\par Table  Family         (-x3)         (-x7)        (-x5)          (-x9)
\par _____________________________________________________________________________
\par 48     8048           8041A                      8022           8021
\par 65     6502           R65C02                     R65C00/21
\par 05     6805           M146805 CMOS               HC05C4
\par 80     Z80            HD64180       
\par 68     6800           6801/6803     68HC11
\par 51     8051                         
\par 85     8080                         
\par 3210   TMS32010                     
\par 3225   TMS320C25                                 TMS320C26
\par 70     TMS7000                      
\par 
\par The above  table does  not attempt  to show  the many  microprocessor  family
\par members that may apply under a given column.
\par 
\par See the TASMTABS.DOC on-line document for details on each specific table.
\par 
\par y - Enable Assembly Timing.  If  this option is enabled TASM will generate  a
\par statement of elapsed time and  assembled lines per second  at the end of  the
\par assembly.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 11
\par }\pard {\f3\fs18 
\par ENVIRONMENT VARIABLES
\par 
\par The TASM  environment can  be customized  by using  the enviroment  variables
\par listed below:
\par 
\par TASMTABS.  This  variable  specifies  the  path  to  be  searched  for   TASM
\par instruction set definition tables.   If it is  not defined then the  table(s)
\par must exist in the current  working directory.  If it  was desired to put  the
\par instruction set definition  tables in a  directory called 'TASM'  on a  drive
\par called 'C:', the following statement would be appropriate in the AUTOEXEC.BAT
\par file:
\par 
\par         set TASMTABS=C:\\TASM
\par 
\par TASMOPTS. This variable specifies  TASM command line options  that are to  be
\par invoked every time TASM is executed.  For example, if TASM is being used  for
\par 8048 assemblies  with  binary  object  file  output  desired,  the  following
\par statement would be appropriate in the AUTOEXEC.BAT file:
\par 
\par         set TASMOPTS=-48 -b
\par 
\par 
\par EXIT CODES
\par 
\par When TASM terminates, it will return to DOS the following exit codes:
\par 
\par Exit Code      Meaning
\par ___________________________________________________________
\par 0              Normal completion, no assembly errors
\par 1              Normal completion, with assembly errors
\par 2              Abnormal completion, insufficient memory
\par 3              Abnormal completion, file access error
\par 4              Abnormal completion, general error
\par 
\par 
\par Exit codes 2 and above  will also be accompanied  by messages to the  console
\par concerning the error.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 12
\par }\pard {\f3\fs18 
\par SOURCE FILE FORMAT
\par 
\par Statements in the  source file must  conform to a  format as follows  (except
\par for assembler  directive  statements  which are  described  in  a  subsequent
\par section):
\par 
\par         label  operation    operand       comment
\par 
\par All of  the  fields  are  optional,  under  appropriate  circumstances.    An
\par arbitrary amount of white space (space and tabs) can separate each field  (as
\par long as the maximum line length of 255 characters is not exceeded).  Each  of
\par the fields are described below:
\par 
\par Label Field. If the first character of the line is alphabetic, it is  assumed
\par to be the start of  a label.  Subsequent characters  are accepted as part  of
\par that label until a space, tab, or ':' is encountered.  The assembler  assigns
\par a value to the label corresponding  to the current location counter.   Labels
\par can be a maximum of 32 characters  long.  Labels can contain upper and  lower
\par case letters, digits, underscores, and  periods (the first character must  be
\par alphabetic).  Labels are  case sensitive - the  label 'START' is a  different
\par label from 'start' - unless the '-i' (ignore case) option is enabled.
\par 
\par Operation Field. The operation field  contains an instruction mnemonic  which
\par specifies the action  to be  carried out by  the target  processor when  this
\par instruction is executed.  The interpretation of each mnemonic is dependent on
\par the target microprocessor  (as indicated by  the selected TASM  table).   The
\par operation field may  begin in  any column except  the first.   The  operation
\par field is case insensitive.
\par 
\par Operand Field. The operand field specifies the data to be operated on by  the
\par instruction.  It  may include expressions  and/or special symbols  describing
\par the addressing mode  to be  used.  The  actual format  and interpretation  is
\par dependent on  the target  processor.   For a  description of  the format  for
\par currently supported  processors,  see  the  TASMTABS.DOC  file  on  the  TASM
\par distribution disk.
\par 
\par Comment Field.  The comment field always  begins with a semicolon.  The  rest
\par of the line from the semicolon to the end of the line is ignored by TASM, but
\par passed on to  the listing file  for annotation purposes.   The comment  field
\par must be the last field on a line,  but it may be the only field, starting  in
\par column one, if desired.
\par 
\par Multiple  Statement Lines.   If the backslash  character is encountered on  a
\par source line,   it  is  treated as  a  newline.   The  remainder of  the  line
\par following  the  backslash  will be processed as an independent line of source
\par code.  This allows one to put multiple statements  on a line.  This  facility
\par is not so useful of itself,   but when coupled with  the capability  of   the
\par DEFINE   directive,    powerful    multiple  statement    macros    can    be
\par constructed  (see  section  on ASSEMBLER DIRECTIVES).  Note that when   using
\par the  statement  separator,  the character  immediately  following  it  should
\par be considered the first character of a new  line,  and thus must either be  a
\par start of a label or  white space (not an instruction).  As the examples show,
\par a space is put between the backslash and the start of the next instruction.
\par 
\par 
\par Some  examples  of  valid  source  statements follow (6502 mnemonics shown):
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 13
\par }\pard {\f3\fs18 
\par 
\par label1   lda      byte1   ;get the first byte
\par          dec      byte1
\par          jne      label1
\par                   
\par ;                 
\par label2            
\par          sta      byte2,X
\par          ;        a multiple statement line follows
\par          lda      byte1\\ sta byte1+4\\ lda byte2\\ sta byte2+4
\par 
\par 
\par 
\par EXPRESSIONS
\par 
\par Expressions are  made  up of  various  syntactic elements  (tokens)  combined
\par according to  a set  of syntactical  rules.   The  tokens are  summarized  as
\par follows:
\par 
\par         1.  Labels
\par         2.  Constants
\par         3.  Location Counter Symbol
\par         4.  Operators
\par         5.  Parenthesis
\par 
\par Labels. Labels are strings of characters that have a numeric value associated
\par with them, generally representing an address.   Labels can contain upper  and
\par lower case letters, digits,  underscores, and periods.   The first  character
\par must be a  letter or the  local label prefix  (default '_'). The  value of  a
\par label is  limited  to  32  bit  precision.   Labels  can  contain  up  to  32
\par characters, all of which are significant (none are ignored when looking at  a
\par label's value, as in some assemblers).   Case is significant unless the  '-i'
\par command line option is invoked.
\par 
\par Local labels must  only be  unique within the  scope of  the current  module.
\par Modules are defined with the MODULE directive.  Here is an example:
\par 
\par                .MODULE xxx
\par                lda regx
\par                jne _skip
\par                dec
\par         _skip  rts
\par                
\par                .MODULE yyy
\par                lda regy
\par                jne _skip
\par                dec
\par         _skip  rts
\par 
\par 
\par In the above example, the _skip label is reused without harm.  As a  default,
\par local labels are not shown in the label table linting (resulting from the  '-
\par l' command line  option).   See also  sections on  MODULE and  LOCALLABELCHAR
\par directives.
\par 
\par Numeric Constants. Numeric constants must  always begin with a decimal  digit
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 14
\par }\pard {\f3\fs18 
\par (thus hexadecimal constants that  start with a letter  must be prefixed by  a
\par '0' unless the  '$' prefix is  used).  The  radix is determined  by a  letter
\par immediately following the digit string according to the following table:
\par 
\par        Radix          Suffix                   Prefix
\par        ______________________________________________________
\par        2              B or b                   %
\par        8              O or o                   @
\par        10             D or d (or nothing)      
\par        16             H or h                   $
\par 
\par Decimal is the default radix, so decimal constants need no suffix or prefix.
\par 
\par The following representations are equivalent:
\par 
\par        1234H          or     $1234
\par        100d           or     100
\par        177400O        or     @177400
\par        01011000b      or     %01011000
\par 
\par The prefixes  are provided  for  compatibility with  some other  source  code
\par formats but  introduce  a  problem of  ambiguity.    Both '%'  and  '$'  have
\par alternate uses  ('%' for  modulo,  '$' for  location  counter symbol).    The
\par ambiguity is  resolved  by examining  the  context.   The  '%'  character  is
\par interpreted as the modulo operator only if it is in a postion suitable for  a
\par binary operator. Similarly, if the first character following a '$' is a valid
\par hexadecimal digit, it is assumed to be a radix specifier and not the location
\par counter.
\par 
\par Character Constants. Character constants are single characters surrounded  by
\par single quotes  (following  quote  is  optional).   The  ASCII  value  of  the
\par character in the quotes is returned.  No escape provision exists to represent
\par non-printable characters within the quotes,  but this is not necessary  since
\par these can be just  as easily represented as  numeric constants (or using  the
\par TEXT directive which does allow escapes).
\par 
\par String Constants. String constants are  one or more characters surrounded  by
\par double quotes.  Note  that string constants are  not allowed in  expressions.
\par They are  only  allowable  following  the  TITLE,  BYTE  and  TEXT  assembler
\par directives. The quoted strings  may also contain escape  sequences to put  in
\par unprintable values.  The following escape sequences are supported:
\par 
\par         Escape
\par         Sequence       Description
\par         ___________________________________________________________
\par         \\n             Line Feed
\par         \\r             Carriage return
\par         \\b             Backspace
\par         \\t             Tab
\par         \\f             Formfeed
\par         \\\\             Backslash
\par         \\"             Quote
\par         \\000           Octal value of character
\par 
\par Location  Counter  Symbol.   The  current value of the location counter  (PC)
\par can be  used in  expressions by  placing a  '$' in  the desired  place.   The
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 15
\par }\pard {\f3\fs18 
\par Location Counter Symbol is allowable anywhere  a numeric constant is.   (Note
\par that if the '$' is followed  by a decimal digit then it  is  taken to be  the
\par hexadecimal radix  indicator  instead  of the  Location  Counter  symbol,  as
\par mentioned above).    The '*'  may  also be  used  to represent  the  location
\par counter,  but  is  less   preferred  because  of   its  ambiguity  with   the
\par multiplicative operator.
\par 
\par Operators. Expressions  can  optionally  contain operators  to  perform  some
\par alterations or  calculations  on  particular  values.     The  operators  are
\par summarized as follows:
\par 
\par        Operator    Type            Description
\par        __________________________________________
\par        +           Additive        addition
\par        -                           subtraction
\par                                    
\par        *           Multiplicative  multiplication
\par        /                           division
\par        %                           modulo
\par        <<                          logical shift left
\par        >>                          logical shift right
\par                                    
\par        ~           Unary           bit inversion (one's complement)
\par        -                           unary negation
\par                                    
\par        =           Relational      equal
\par        ==                          equal
\par        !=                          not equal
\par        <                           less than
\par        >                           greater than
\par        <=                          less than or equal
\par        >=                          greater than or equal
\par                                    
\par        &           Binary          binary 'and'
\par        |                           binary 'or'
\par        ^                           binary 'exclusive or'
\par 
\par The syntax is much the same as in 'C' with the following notes:
\par 
\par 1.  No operator precedence  is in effect.  Evaluation  is from left to  right
\par unless grouped by  parenthesis (see example below).
\par 
\par 2.  All evaluations are done with 32 bit signed precision.
\par 
\par 3.  Both '=' and '==' are allowable equality checkers.  This is allowed since
\par the syntax  does not  provide assignment  capability (as  '=' would  normally
\par imply).
\par 
\par The relational operators return a value of 1 if the relation is true and 0 if
\par it is false.  Thirtytwo bit signed arithmetic is used.
\par 
\par It is  always  a  good idea  to  explicitly  indicate the  desired  order  of
\par evaluation with  parenthesis,   especially  to   maintain  portability  since
\par TASM does  not  evaluate  expressions  in  the  same  manner  as  many  other
\par assemblers.   To  understand  how it  does  arrive    at   the    values  for
\par expressions, consider the following example:
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 16
\par }\pard {\f3\fs18 
\par         1 + 2*3 + 4
\par 
\par TASM would evaluate this as:
\par 
\par        (((1 + 2) * 3) + 4) = 13
\par 
\par Typical rules of precedence would cause the (2*3) to be evaluated first, such
\par as:
\par 
\par         1 + (2*3) + 4      = 11
\par 
\par To make  sure  you get  the  desired  order of  evaluation,  use  parenthesis
\par liberally.
\par 
\par Note that  TASM versions  earlier than  2.7.8 employed  a somewhat  different
\par method of evaluating expressions  (also without precedence) that  essentially
\par resulted in a right to left evaluation.
\par 
\par Here are some examples of valid expressions:
\par 
\par         (0f800H + tab)
\par         (label_2 >> 8)
\par         (label_3 << 8) & $f000
\par         $ + 4
\par         010010000100100b + 'a'
\par         (base + ((label_4 >> 5) & (mask << 2))
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 17
\par }\pard {\f3\fs18 
\par ASSEMBLER DIRECTIVES
\par 
\par Most of  the  assembler directives  have  a  format similar  to  the  machine
\par instruction format.    However,  instead of  specifying  operations  for  the
\par processor to carry out,  the directives cause the  assembler to perform  some
\par function related to  the assembly process.  TASM has two  types of  assembler
\par directives - those that mimic the 'C' preprocessor functions, and those  that
\par resemble the more traditional assembler  directive functions.  Each of  these
\par will be discussed.
\par 
\par The 'C' preprocessor  style directives are  invoked with a  '#' as the  first
\par character of the line followed by the appropriate directive (just as in 'C').
\par Thus, these directives cannot have a label preceding them (on the same line).
\par Note that in the examples directives are shown in upper case, however, either
\par upper or lower case is acceptable.
\par 
\par ADDINSTR. This directive can  be used to  define additional instructions  for
\par TASM to use in this assembly.  The format is:
\par 
\par [label]  .ADDINSTR inst args opcode nbytes modop class shift binor
\par 
\par The fields are  separated by  white space  just as  they would  appear in  an
\par instruction  definition  file.  See  the   TASMTABS.DOC  file  on  the   TASM
\par distribution disk for more detail.
\par 
\par AVSYM.  See SYM/AVSYM.
\par 
\par BLOCK. This directive causes the Instruction Pointer to advance the specified
\par number of bytes without assigning values to the skipped over locations.   The
\par format is:
\par 
\par         [label] .BLOCK        expr
\par 
\par Some valid examples are:
\par 
\par         word1   .BLOCK     2
\par         byte1   .block     1
\par         buffer  .block     80
\par 
\par BSEG/CSEG/DSEG/NSEG/XSEG. These  directives can  be invoked  to indicate  the
\par appropriate address space for  symbols and labels  defined in the  subsequent
\par code.   The  invocation  of these  directives  in  no way  affects  the  code
\par generated, only provides  more information in  the symbol table  file if  the
\par AVSYM directive is employed.   Segment control directives  such as these  are
\par generally supported  by assemblers  that  generate relocatable  object  code.
\par TASM does not generate  relocatable object code and  does not support a  link
\par phase, so these  directives have  no direct  effect on  the resulting  object
\par code. The segments are defined as follows:
\par 
\par         Directive       Segment Description
\par         _________________________________________________________
\par         BSEG            Bit  address
\par         CSEG            Code address
\par         DSEG            Data address (internal RAM)
\par         NSEG            Number or constant (EQU)
\par         XSEG            External data address (external RAM)
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 18
\par }\pard {\f3\fs18 
\par BYTE.  This directive allows a value assignment to the byte pointed to by the
\par current Instruction Pointer.  The format is:
\par 
\par         [label] .BYTE   expr [, expr ...]
\par 
\par Onlythe lower eight bits of expr are used.  Multiple bytes may be assigned by
\par separating them with  commas or  (for printable strings)  enclosed in  double
\par quotes. Here are some examples:
\par 
\par 
\par       label1   .BYTE     10010110B
\par                .byte     'a'
\par                .byte     0
\par                .byte     100010110b,'a',0
\par                .byte     "Hello", 10, 13, "World"
\par 
\par 
\par CHK.  This directive causes  a checksum to be  computed and deposited at  the
\par current location.    The  starting  point  of  the  checksum  calculation  is
\par indicated as an argument.  Here is the format:
\par 
\par         .CHK    starting_addr
\par 
\par Here is an example:
\par 
\par 
\par         start:  NOP
\par                 LDA #1
\par                 .CHK start
\par 
\par 
\par The checksum is calculated as the simple arithmetic sum of all bytes starting
\par at the start_add up to  but not including the  address of the CHK  directive.
\par The least significant byte is all that is used.
\par 
\par CODES/NOCODES. These directives can be used to alternately turn on or off the
\par generation of formatted listing output with line numbers, opcodes, data, etc.
\par With NOCODES  in  effect, the  source  lines are  sent  to the  listing  file
\par untouched.  This  is useful around  blocks of  comments that need  a full  80
\par columns of width for clarity.
\par 
\par DB.  This is alternate form of the BYTE directive.
\par 
\par DW.  This is alternate form of the WORD directive.
\par 
\par DEFINE. The DEFINE directive  is one of the  most powerful of the  directives
\par and allows string substitution with optional arguments (macros).  The  format
\par is as follows:
\par 
\par     #DEFINE  macro_label[(arg_list)]  [macro_definition]
\par 
\par     macro_label := string to be expanded when found in the source file.
\par                   
\par     arg_list    := optional argument list for variable substitution
\par                   
\par     macro_def   := string to replace the occurrences of macro_label in
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 19
\par }\pard {\f3\fs18 
\par                             the source file.
\par 
\par The simplest form of the DEFINE directive might look like this:
\par 
\par         #DEFINE         MLABEL
\par 
\par Notice that  no  substitutionary string  is  specified.   The  purpose  of  a
\par statement like this would typically be to  define a label for the purpose  of
\par controlling some subsequent conditional assembly (IFDEF or IFNDEF).
\par 
\par A more complicated example, performing  simple substitution, might look  like
\par this:
\par 
\par         #DEFINE         VAR1_LO         (VAR1 & 255)
\par 
\par This statement would cause all occurrences of  the  string  'VAR1_LO' in  the
\par source to be substituted with '(VAR1 & 255)'.
\par 
\par As   a   more   complicated   example,    using   the   argument    expansion
\par capability, consider this:
\par 
\par         #DEFINE         ADD(xx,yy)      clc\\ lda xx\\ adc yy\\ sta xx
\par 
\par If the source file then contained a line like this:
\par 
\par         ADD(VARX,VARY)
\par 
\par It would be expanded to:
\par 
\par         clc\\ lda VARX\\ adc VARY\\ sta VARX
\par 
\par The above  example shows  the use  of the  backslash ('\\')  character   as  a
\par multiple   instruction    statement  delimiter.   This  approach  allows  the
\par definition of fairly  powerful,   multiple statement   macros.   The  example
\par shown generates 6502 instructions to add one memory location to another.
\par 
\par Some rules associated with the argument list:
\par 
\par 1.  Use a maximum of 10 arguments.
\par 
\par 2.  Each argument should be a maximum of 15 characters.
\par 
\par Note that macros can be defined on the TASM command line, also, with the '-d'
\par option flag.
\par 
\par DEFCONT. This directive can be used to  add to the last macro started with  a
\par DEFINE directive.   This  provides a  convenient way  to define  long  macros
\par without running off the edge of the page. The ADD macro shown above could  be
\par defined as follows:
\par 
\par         #DEFINE         ADD(xx,yy)     clc
\par         #DEFCONT                     \\ lda xx
\par         #DEFCONT                     \\ adc yy
\par         #DEFCONT                     \\ sta xx
\par 
\par EJECT.   This   directive   can   be used  to force  a top  of form  and  the
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 20
\par }\pard {\f3\fs18 
\par generation of a page  header on the  list file.  It  has no   effect  if  the
\par paging mode is off (see PAGE/NOPAGE).  The format is:
\par 
\par         .EJECT
\par 
\par ELSE.  This directive  can optionally be  used with IFDEF,  IFNDEF and IF  to
\par delineate an alternate block of code to be assembled if the block immediately
\par following the IFDEF, IFNDEF or IF is not assembled.
\par 
\par Here are some examples of the use of IFDEF, IFNDEF,  IF,  ELSE,  and ENDIF:
\par 
\par         #IFDEF   label1
\par         lda      byte1
\par         sta      byte2
\par         #ENDIF   
\par                  
\par         #ifdef   label1
\par         lda      byte1
\par         #else    
\par         lda      byte2
\par         #endif   
\par                  
\par         #ifndef  label1
\par         lda      byte2
\par         #else    
\par         lda      byte1
\par         #endif   
\par 
\par         #if ($ >= 1000h)
\par         ; generate an invalid statement to cause an error
\par         ;  when we go over the 4K boundary.
\par          !!! PROM bounds exceeded.
\par         #endif
\par 
\par END.   This  directive should follow all  code/data generating statements  in
\par the source file.  It forces the last record to be written to the object file.
\par The format is:
\par 
\par         [label]       .END
\par 
\par ENDIF. This directive must  always follow an IFDEF,  IFNDEF, or IF  directive
\par and signifies the end of the conditional block.
\par 
\par EQU. This directive can be used to  assign values to labels.  The labels  can
\par then be used in expressions in place of the literal constant.  The format is:
\par 
\par         label   .EQU    expr
\par 
\par Here is an example:
\par 
\par         MASK   .EQU   0F0H
\par         ;             
\par                lda    IN_BYTE
\par                and    MASK
\par                sta    OUT_BYTE
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 21
\par }\pard {\f3\fs18 
\par An alternate form of 'EQU' is  '='.  The previous example is equivalent to:
\par 
\par         MASK    =   0F0H
\par 
\par or
\par 
\par         MASK    =0FOH
\par         MASK    =$FO
\par 
\par White space must exist after the label,  but none is required after the '='.
\par 
\par EXPORT. This directive can be used to define labels (symbols) that are to  be
\par written to the export symbol file.  The symbols are written as equates (using
\par the .EQU  directive)  so  that  the  resulting file  can  be  included  in  a
\par subsequent assembly.  This feature can help overcome some of the deficiencies
\par of TASM due to its lack of a relocating linker. The format is:
\par 
\par [label]  .EXPORT      label
\par 
\par The following example  illustrates the use  of the EXPORT  directive and  the
\par format of the resulting export file:
\par 
\par Source file:
\par 
\par         .EXPORT        read_byte
\par         .EXPORT        write_byte
\par         .EXPORT        open_file
\par 
\par Resulting export file:
\par 
\par read_byte      .EQU   $1243
\par write_byte     .EQU   $12AF
\par open_file      .EQU   $1301
\par 
\par 
\par IFDEF. This directive can be used to optionally assemble a block of code.  It
\par has the following form:
\par 
\par         #IFDEF  macro_label
\par 
\par When invoked, the list of macro labels (established via DEFINE directives) is
\par searched.  If the label is found, the following lines of code are  assembled.
\par If not found, the input file is skipped  until an ENDIF or ELSE directive  is
\par found.
\par 
\par Lines that are skipped over still appear in the listing file, but a '~'  will
\par appear immediately after the current PC and no object code will be  generated
\par (this is applicable to IFDEF, IFNDEF, and IF).
\par 
\par IFNDEF. This directive is the opposite of the IFDEF directive.  The block  of
\par code following is assembled only  if the specified macro_label is  undefined.
\par It has the following form:
\par 
\par         #IFNDEF  macro_label
\par 
\par When invoked, the list of macro labels (established via DEFINE directives) is
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 22
\par }\pard {\f3\fs18 
\par searched.   If the  label  is not  found, the  following  lines of  code  are
\par assembled.  If it is found, the input file is skipped until an ENDIF or  ELSE
\par directive is found.
\par 
\par IF.   This directive  can be  used to  optionally assemble  a block  of  code
\par dependent on the value of a given expression.  The format is as follows:
\par 
\par         #IF     expr
\par 
\par If the expression expr evaluates to non-zero, the following block of code  is
\par assembled (until an ENDIF or ELSE is encountered).
\par 
\par INCLUDE.  The INCLUDE directive reads  in and assembles the indicated  source
\par file.  INCLUDEs can  be nested up  to six levels.   This allows a  convenient
\par means to keep common definitions, declarations, or subroutines in files to be
\par included as needed.  The format is as follows:
\par 
\par         #INCLUDE        filename
\par 
\par The filename must be enclosed in double quotes.  Here are some examples:
\par 
\par         #INCLUDE       "macros.h"
\par         #include       "equates"
\par         #include       "subs.asm"
\par 
\par LIST/NOLIST.  These directives can be used to alternately turn the output  to
\par the list file on (LIST) or off (NOLIST).  The format is:
\par 
\par         .LIST
\par         .NOLIST
\par 
\par LOCALLABELCHAR. This directive can be used to override the default "_" as the
\par label prefix indicating a local label.  For example, to change the prefix  to
\par "?" do this:
\par 
\par         .LOCALLABELCHAR "?"
\par 
\par Be carefull to  use only  characters that  are not  operators for  expression
\par evaluation.  To do  so causes ambiguity for  the expression evaluator.   Some
\par safe characters are "?", "\{", and "\}".
\par 
\par LSFIRST/MSFIRST. These  directives  determine  the  byte  order  rule  to  be
\par employed for the WORD  directive.  The default  (whether correct or not)  for
\par all TASM  versions  is the  least  significant  byte first  (LSFIRST).    The
\par following illustrates its effect:
\par 
\par         0000  34 12    .word $1234
\par         0002           .msfirst
\par         0002  12 34    .word $1234
\par         0004           .lsfirst
\par         0004  34 12    .word $1234
\par 
\par 
\par ORG. This directive provides the means to set the Instruction Pointer (a.k.a.
\par Program Counter) to the desired value.  The format is:
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 23
\par }\pard {\f3\fs18 
\par         [label] .ORG    expr
\par 
\par The label is optional.  The Instruction pointer is assigned the value of  the
\par expression, expr.  For example, to  generate code starting at address  1000H,
\par the following could be done:
\par 
\par         start   .ORG    1000H
\par 
\par The expression  (expr)  may contain  references  to the  current  Instruction
\par Pointer, thus  allowing various  manipulations to  be done.  For example,  to
\par align the Instruction Pointer  on the next 256  byte boundary, the  following
\par could be done:
\par 
\par                 .ORG  (($ + 0FFH) & 0FF00H)
\par 
\par ORG can also be used to reserve space without assigning values:
\par 
\par                .ORG    $+8
\par 
\par An alternate form of ORG  is '*=' or '$='.   Thus the following two  examples
\par are exactly equivalent to the previous example:
\par 
\par                 *=*+8
\par                 $=$+8
\par 
\par PAGE/NOPAGE.  These  directives can be  used to alternately  turn the  paging
\par mode on (PAGE) or  off (NOPAGE).  If  paging is in  effect, then every  sixty
\par lines of output will be  followed by a Top of  Form character and a two  line
\par header containing page number, filename, and the title.  The format is:
\par 
\par         .PAGE
\par         .NOPAGE
\par 
\par The number of lines per page can be set with the '-p' command line option.
\par 
\par 
\par SET. This directive allows the value of an existing label to be changed.  The
\par format is:
\par 
\par         label   .SET    expr
\par 
\par The use of the SET directive should be avoided since changing the value of  a
\par label can sometimes  cause phase  errors between  pass 1  and pass  2 of  the
\par assembly.
\par 
\par SYM/AVSYM. These directives can be  used to cause a  symbol table file to  be
\par generated.  The format is:
\par 
\par         .SYM    ["symbol_filename"]
\par         .AVSYM  ["symbol_filename"]
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 24
\par }\pard {\f3\fs18 
\par For example:
\par 
\par         .SYM       "symbol.map"
\par         .SYM       
\par         .AVSYM     "prog.sym"
\par         .AVSYM
\par 
\par The two  directives are  similar, but  result in  a different  format of  the
\par symbol table file.  The format of the  SYM file is one line per symbol,  each
\par symbol starts in the  first column and  is followed by  white space and  then
\par four hexadecimal digits representing the value of the symbol.  The  following
\par illustrates the format:
\par 
\par        label1         FFFE
\par        label2         FFFF
\par        label3         1000
\par 
\par The AVSYM is provided  to generate symbol tables  compatible with the  Avocet
\par 8051 simulator.  The format is similar, but each line is prefixed by an  'AS'
\par and each symbol value is prefixed by a segment indicator:
\par 
\par         AS     start          C:1000
\par         AS     read_byte      C:1243
\par         AS     write_byte     C:1280
\par         AS     low_nib_mask   N:000F
\par         AS     buffer         X:0080
\par 
\par The segment  prefixes are  determined by  the most  recent segment  directive
\par invoked (see BSEG/CSEG/DSEG/NSEG/XSEG directives).
\par 
\par TEXT. This directive allows an ASCII string to be used to assign values to  a
\par sequence of  locations starting  at  the current  Instruction Pointer.    The
\par format is:
\par 
\par         [label] .TEXT   "string"
\par 
\par The ASCII value of each character in string is taken and assigned to the next
\par sequential location.  Some escape sequences are supported as follows:
\par 
\par         Escape
\par         Sequence       Description
\par         ___________________________________________________
\par         \\n             Line Feed
\par         \\r             Carriage return
\par         \\b             Backspace
\par         \\t             Tab
\par         \\f             Formfeed
\par         \\\\             Backslash
\par         \\"             Quote
\par         \\000           Octal value of character
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 25
\par }\pard {\f3\fs18 
\par 
\par Here are some examples:
\par 
\par         message1   .TEXT   "Disk I/O error"
\par         message2   .text   "Enter file name "
\par                    .text   "abcdefg\\n\\r"
\par                    .text   "I said \\"NO\\""
\par 
\par 
\par TITLE.  This directive allows the user to define a title string that  appears
\par at the top of each page of the list file (assuming the PAGE mode is on).  The
\par format is:
\par 
\par                 .TITLE  "string"
\par 
\par The string should not exceed 80 characters.  Here are some examples:
\par 
\par                 .TITLE  "Controller version 1.1"
\par                 .title  "This is the title of the assembly"
\par                 .title  ""
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 26
\par }\pard {\f3\fs18 
\par 
\par WORD. This directive allows a value assignment to the next two bytes  pointed
\par to by the current Instruction Pointer.  The format is:
\par 
\par         [label] .WORD  expr
\par 
\par The least significant byte of expr is put at the current Instruction  Pointer
\par with the most significant  byte at the next  sequential location (unless  the
\par MSFIRST directive has been invoked).  Here are some examples:
\par 
\par         data_table     .WORD   (data_table + 1)
\par                        .word   $1234
\par                        .Word   (('x' - 'a')  << 2)
\par                        .Word   12, 55, 32
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 27
\par }\pard {\f3\fs18 
\par OBJECT FILE FORMATS
\par 
\par TASM supports four object file formats:
\par 
\par         1.  Intel Hex (default).
\par         2.  MOS Technology Hex.
\par         3.  Motorola Hex.
\par         4.  Binary
\par 
\par Each are described below:
\par 
\par Intel Hex Object Format.  This is the  default format.   This format is  line
\par oriented and uses  only printable  ASCII characters except  for the  carriage
\par return/line feed at the end of each line.  Each line in the file assumes  the
\par following format:
\par 
\par :NNAAAARRHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCTT
\par 
\par Where:
\par 
\par All fields marked 'hex' consist of two or four ASCII hexadecimal digits (0-9,
\par A-F).  A maximum of 24 data bytes will be represented on each line  (override
\par the 24 byte default with the '-o' command line option).
\par 
\par :      = Record Start Character
\par NN     = Byte Count (hex)
\par AAAA   = Address of first byte (hex)
\par RR     = Record Type (hex, 00 except for last record which is 01)
\par HH     = Data Bytes (hex)
\par CC     = Check Sum (hex)
\par TT     = Line Terminator (carriage return, line feed)
\par 
\par The last line of  the file will be  a record conforming  to the above  format
\par with a byte count of zero:
\par 
\par          :00000001FF
\par 
\par The checksum is defined as:
\par 
\par   sum = byte_count + addr_hi + addr_lo + record_type + (sum of data bytes)
\par   checksum =  ((-sum) & ffh)
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 28
\par }\pard {\f3\fs18 
\par MOS Technology Hex Object Format. This format is line oriented and uses  only
\par printable ASCII characters except  for the carriage  return/line feed at  the
\par end of each line.  Each line in the file assumes the following format:
\par 
\par ;NNAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCTT
\par 
\par All fields marked 'hex' consist of two or four ASCII hexadecimal digits (0-9,
\par A-F).  A maximum of 24 data bytes will be represented on each line  (override
\par the 24 byte default with the '-o' command line option).
\par 
\par ;      = Record Start Character
\par NN     = Byte Count (hex)
\par AAAA   = Address of first byte (hex)
\par HH     = Data Bytes (hex)
\par CCCC   = Check Sum (hex)
\par TT     = Line Terminator (carriage return, line feed)
\par 
\par The last line of the file will be a record with a byte count of zero (';00').
\par 
\par The checksum is defined as:
\par 
\par     sum  =  byte_count + address_hi + address_lo + record_type +
\par                 (sum of all data bytes)
\par     checksum =  (sum & ffffh)
\par 
\par 
\par Motorola Hex  Object Format.  This  format is  line  oriented and  uses  only
\par printable ASCII characters except  for the carriage  return/line feed at  the
\par end of each line.  Each line in the file assumes the following format:
\par 
\par S1NNAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCTT
\par 
\par All fields marked 'hex' consist of two or four ASCII hexadecimal digits (0-9,
\par A-F).  A maximum of 24 data bytes will be represented on each line  (override
\par the 24 byte default with the '-o' command line option).
\par 
\par S1     = Record Start Prefix
\par NN     = Byte Count (hex) (data byte count + 3)
\par AAAA   = Address of first byte (hex)
\par HH     = Data Bytes (hex)
\par CC     = Check Sum (hex)
\par TT     = Line Terminator (carriage return, line feed)
\par 
\par The last  line of  the  file will  be a  record  with a  byte count  of  zero
\par ('S903AAAACCTT'). The checksum is defined as:
\par 
\par     sum  =  byte_count + address_hi + address_lo + record_type +
\par             (sum of all data bytes)
\par     checksum =  (~sum & ffh)
\par 
\par 
\par Binary Object Format. This  file format has only  a binary representation  of
\par each data byte with no  address, checksum or format description,  whatsoever.
\par It is often a convenient format to use to pass the data to other programs  on
\par your PC (like a PROM programmer package) but because of the  non-printability
\par and lack of address information, it is not often used to transmit the code to
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 29
\par }\pard {\f3\fs18 
\par other systems.
\par 
\par Note that when this object format is  selected (-b option), the -c option  is
\par forced.  This is done so that no ambiguity arises as a result of the lack  of
\par address information in the file.  Without the -c option, discontinuous blocks
\par of object code would appear contiguous.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 30
\par }\pard {\f3\fs18 
\par LISTING FILE FORMAT
\par 
\par Each line of  source code  generates one  (or more)  lines of  output in  the
\par listing file.  The fields of the output line are as follows:
\par 
\par 1.  Current  source  file  line  number  (4 decimal digits).
\par 
\par 2.  An optional '+'  appears if this is   an  'INCLUDE'   file. (One '+'  for
\par each level of INCLUDE invoked).
\par 
\par 3.  Current Instruction Pointer (4 hex digits).  An optional '~' follows  the
\par Instruction Pointer if the line of source code is not being assembled because
\par of an IFDEF, IFNDEF, or IF directive.
\par 
\par 4.  Resulting code/data generated from  this source line (two hex digits  per
\par byte, each byte separated by a space, up to six bytes per line).
\par 
\par 5.  The source line exactly as it appears in the source file.
\par 
\par If   paging   is   enabled  (by either  the  '-p' option  flag or  the  .PAGE
\par directive) some additional  fields will be  inserted into the   listing  file
\par every 60 lines.  These fields are:
\par 
\par         1.  Top of Form (form feed).
\par         2.  Assembler identifier (e.g. "TASM 6502 Assembler").
\par         3.  Initial source file name.
\par         4.  Page number.
\par         5.  Title.
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 31
\par }\pard {\f3\fs18 
\par PROM PROGRAMMING
\par 
\par A wide variety of PROM programming equipment is available that can use object
\par code in  one or  more of  the formats  TASM supports.   Here  are some  notes
\par concerning the generation of code to be put in PROMs:
\par 
\par 1.  PRESET  MEMORY.   It is often  desirable to  have all bytes  in the  PROM
\par programmed even if not explicitly assigned  a value in the source code  (e.g.
\par the bytes are skipped over with a .ORG statement).  This can be  accomplished
\par by using the  -c (contiguous  block) and the  -f (fill)  command line  option
\par flags.  The -c will  ensure that every byte from  the lowest byte assigned  a
\par value to the the  highest byte assigned  a value will be  in the object  file
\par with no gaps.   The  -f flag will  assign the  specified value  to all  bytes
\par before the assembly begins so that when the object file is written, all bytes
\par not assigned a  value in  the source code  will have  a known value.   As  an
\par example, the following command line will generate object code in the  default
\par Intel Hex format with all bytes not assigned a value in the source set to  EA
\par (hex, 6502 NOP):
\par 
\par                 tasm -65 -c -fEA test.asm
\par 
\par 2.  CONTIGUOUS BLOCKS.   To ensure that TASM  generates object code to  cover
\par the full address range of the target PROM, put a .ORG statement at the end of
\par the source file set to  the last address desired.   For example, to  generate
\par code to be put in a 2716 EPROM (2 Kbytes) from hex address $1000 to $17ff, do
\par something like this in the source file:
\par 
\par                          ;start of the file
\par                          .ORG    $1000
\par                          ;rest of the source code follows
\par  
\par                          <source code>
\par  
\par                          ;end of the source code
\par                          .ORG    $17ff
\par                          .BYTE   0
\par                          .END
\par 
\par Now, to  invoke TASM  to generate  the code  in the  binary format  with  all
\par unassigned bytes set to 00 (6502 BRK), do the following:
\par 
\par                 tasm -65 -b -f00 test.asm
\par 
\par Note that -b forces the -c option.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 32
\par }\pard {\f3\fs18 
\par ERROR MESSAGES
\par 
\par 
\par Error Message                             Description
\par ______________________________________________________________________________
\par Binary operator where value expected.     Two  binary  operators  in  a   row
\par                                           indicate a missing value.
\par 
\par Cannot malloc for label storage           Insufficient memory  to store  more
\par                                           labels. See LIMITATIONS.
\par 
\par Duplicate label.                          Duplicate    label    checks    are
\par                                           optionally  enabled  by  the   '-a'
\par                                           option.
\par 
\par File name too short                       A file name on the command line  is
\par                                           fewer than  3 characters.  This  is
\par                                           done to  prevent a  garbled  option
\par                                           flag from being  taken as a  source
\par                                           file, which in  turn can result  in
\par                                           the source file taken as an  object
\par                                           file (which are truncated at start-
\par                                           up time).
\par 
\par Heap overflow on label definition.        TASM was unable to allocate  memory
\par                                           to store the label.
\par 
\par Invalid operand.  No indirection for this instruction.
\par                                           The first character  of an  operand
\par                                           was  a  left  parenthesis  for   an
\par                                           instruction    that    does     not
\par                                           explicitly  specify  that  as   the
\par                                           format.    Some   micros  use   the
\par                                           parenthesis  as  an  indicator   of
\par                                           indirection, but putting a layer of
\par                                           parenthesis around an expression is
\par                                           always a valid thing to do (as  far
\par                                           as  the  expression  evaluator   is
\par                                           concerned).  The test for this case
\par                                           is only done if  the -a4 option  is
\par                                           selected. See  section on  ASSEMBLY
\par                                           CONTROL.
\par 
\par Invalid token where value expected.       Two binary operators  in a row  are
\par                                           not allowed.
\par 
\par Label too long                            Labels are limited to 31 characters.
\par 
\par Label value misaligned                    The value  of  a label  appears  to
\par                                           have  a  different  value  on   the
\par                                           second pass then it was computed to
\par                                           have on the  first pass.   This  is
\par                                           generally   due   to   Zero    Page
\par                                           Addressing mode  problems with  the
\par                                           6502 version of TASM.  Labels  that
\par                                           are used in operands for statements
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 33
\par }\pard {\f3\fs18 
\par                                           that  could   utilize   Zero   Page
\par                                           addressing mode  should  always  be
\par                                           defined before used as an operand.
\par 
\par Label not found                           A label used  in an expression  was
\par                                           not  found  in  the  current  label
\par                                           table.
\par 
\par Label must pre-exist for SET.             The  SET  directive  can  only   be
\par                                           applied to an existing label.
\par 
\par Label table overflow                      To   many    labels    have    been
\par                                           encountered.
\par 
\par List file open error                      TASM  was  not  able  to  open  the
\par                                           specified list file.
\par 
\par Macro expansion too long.                 The expansion of  a macro  resulted
\par                                           in a line that exceeded the maximum
\par                                           length.
\par 
\par Maximum number of macros exceeded         To many macros (DEFINEs) have  been
\par                                           encountered.
\par 
\par No END directive before EOF               The source file did not have an END
\par                                           directive in it. This is not fatal,
\par                                           but may cause the last object  file
\par                                           record to be lost.
\par 
\par No  files  specified                      TASM was  invoked  with  no  source
\par                                           file specified.
\par 
\par No such label yet defined.                A SET directive was encountered for
\par                                           a label not yet defined.  The value
\par                                           of labels that are modified by  the
\par                                           SET directive must already exist.
\par 
\par No indirection for this instruction.      A parenthesis was found around  the
\par                                           operand  expression.     This   may
\par                                           indicate   an   attempt   to    use
\par                                           indirection     where     it     is
\par                                           inappropriate.
\par 
\par Non-unary operator at start of expression A binary operator (such as '*') was
\par                                           found  at  the   beginning  of   an
\par                                           expression.  Some micros use '*' as
\par                                           an indirection operator.  Since  it
\par                                           is also a  legititmate operator  in
\par                                           an expression,  some ambiguity  can
\par                                           arise.        If    a    particular
\par                                           instruction/addressing  mode   does
\par                                           not allow indirection, and a '*' is
\par                                           placed in front  of the  associated
\par                                           expression,  the   assembler   will
\par                                           assume this error.     See the  -a8
\par                                           option of ASSEMBLY CONTROL.
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 34
\par }\pard {\f3\fs18 
\par Object file open error                    TASM  was  not  able  to  open  the
\par                                           specified object file.
\par 
\par Range of argument exceeded                The value  of an  argument  exceeds
\par                                           the valid  range  for  the  current
\par                                           instruction and addressing mode.
\par 
\par Range of relative branch exceeded         A branch  instruction  exceeds  the
\par                                           maximum range.
\par 
\par Source file open error                    TASM  was  not  able  to  open  the
\par                                           specified source file.
\par 
\par Unrecognized directive                    A statement starting with a '.'  or
\par                                           '#' has  a  mnemonic  that  is  not
\par                                           defined as a directive.
\par 
\par Unrecognized  instruction                 A statement has an opcode  mnemonic
\par                                           that is not defined.
\par 
\par Unrecognized argument                     A statement has  an  operand format
\par                                           that is not defined.
\par 
\par Unknown token                             Unexpected  characters  were  found
\par                                           while parsing an expression.
\par 
\par Unused data in MS byte of argument.       An instruction  or  directive  used
\par                                           the least  significant byte  of  an
\par                                           argurment   and   left   the   most
\par                                           significant byte unused, but it was
\par                                           non-zero.
\par 
\par Unkown option Flag.                       Invalid  option   flag   has   been
\par                                           specified  on  the  command   line.
\par                                           invoke TASM  with  nothing  on  the
\par                                           command line to see a list of valid
\par                                           options.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 35
\par }\pard {\f3\fs18 
\par BUGS AND LIMITATIONS
\par 
\par Limitations and Specifications
\par                                            TASM                  TASMB
\par _____________________________________________________________________________
\par Maximum number of labels                   2000                  10000
\par Maximum length of labels                   32 characters
\par Maximum address space                      64 Kbytes (65536 bytes)
\par Maximum number of nested INCLUDES          4
\par Maximum length of TITLE string             79 characters
\par Maximum source line length                 255 characters
\par Maximum length after macro expansion       255 characters
\par Maximum length of expressions              255 characters
\par Maximum length of pathnames                79 characters
\par Maximum length of command line             127 characters
\par                                            
\par Maximum number of instructions (per table) 600                   1000
\par Maximum number of macros                   1000                  
\par Maximum number of macro arguments          10                    
\par Maximum length of macro argument           16 characters         
\par Heap size (for labels, macros, & buffers)  20000 bytes           60000
\par Memory requirements                        160K                  256K
\par 
\par Bugs
\par 
\par 1.  The  8048 version of  TASM does not  check for use  of memory beyond  any
\par reasonable bounds (e.g.  an 8048 has a maximum address space of 4 Kbytes  but
\par TASM will let you pretend that you have 64 Kbytes).
\par 
\par 2.  Expression  evaluation has  no operator  precedence in  effect which  can
\par make  for  unexpected results if not explicitly grouped with parenthesis.
\par 
\par 3.  First page of  listing file will not show  a user defined title  (defined
\par via TITLE directive).
\par 
\par 4.  TASM sometimes does not generate  error messages  for  improperly  formed
\par expressions.
\par 
\par }\pard {\f3\fs18 \page TASM - Table Driven Assembler Version 2.9                             Page 36
\par }\pard {\f3\fs18 
\par APPENDIX A - ORDERING INFORMATION
\par 
\par TASM is distributed as shareware.   The shareware portion of the product  may
\par be freely copied and  used for evaluation  purposes.  Use  of TASM beyond  an
\par evaluation period of 90 days requires registration. Registered users  receive
\par the following benefits:
\par 
\par     1.  The recent version of TASM.
\par     2.  TASM source code (in C).
\par     3.  Bound TASM manual.
\par     4.  Telephone support.
\par     5.  Knowledge that they are supporting the development of useful
\par         but inexpensive software.
\par 
\par DESCRIPTION                                  UNIT PRICE    PRICE
\par ___________________________________________________________________________
\par 
\par TASM Registration (TASM disk, manual, & source)  $40.00    _______
\par 
\par TASM Site Registration (for sites with multiple   90.00    _______
\par    users.  Includes same materials as above.)          
\par 
\par TASM User's Manual (included above)               10.00    _______
\par 
\par TASM update for registered users                  10.00    _______
\par    (latest disk (with source), and manual)             
\par 
\par Subtotal                                                   _______
\par 
\par Tax (Washington state residents add 8.2%)                  _______
\par 
\par Billing fee (for orders not accompanied by check) 10.00    _______
\par 
\par Foreign postage (outside North America) add $10.00         _______
\par   (Foreign orders must be in US funds drawn on a US bank)
\par 
\par TOTAL (post paid)                                          _______
\par 
\par 
\par Which processors are of primary interest to you?  __________________
\par (This is for our information only.  You will receive all current TASM tables).
\par 
\par Shipping Address:                                Send check or money order to:
\par                                                  Speech Technology Incorporated
\par ______________________________________________   Software Division
\par                                                  837 Front Street South
\par ______________________________________________   Issaquah, WA  98027   USA
\par 
\par ______________________________________________
\par 
\par }\pard {\f3\fs18 \page 
\par }}