sendmsg() / recvmsg()

zur Uebertragung von Nachrichten und eines geoeffneten 
Deskriptors zwischen Prozessen ueber Unix Domain Sockets

1. benoetigte .h-Files: 
    #include <sys/types.h> 
    #include <sys/socket.h>
    #include <sys/uio.h> 
    #include <sys/un.h>
   Link-Bibliotheken:
    -lsocket

2. benoetigte Strukturen
   (in .h-Files definiert)

   struct iovec: zur Verwendung mehrerer E/A-Bereiche
    Solaris-Standarddefinition:
     struct iovec {
      caddr_t iov_base;  fuer 1 E/A-Bereichs-Adresse (= char *)
      long    iov_len;   Laenge des E-Bereichs bzw. der A-Daten
     };
    Struktur nach Posix (Linux-Standard):
     struct iovec {
      void * iov_base;
      size_t iov_len;
     };
    Auswahl der Posix-Variante unter Solaris mit:
     #ifndef _XOPEN_SOURCE
     #define _XOPEN_SOURCE
     #endif
     #ifndef _XOPEN_SOURCE_EXTENDED
     #define _XOPEN_SOURCE_EXTENDED 1
     #endif
     vor den include-Anweisungen oder
    entsprechende Optionsangaben beim Compileraufruf:
     -D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1
    (unter Linux nicht erforderlich)

   struct msghdr: zur Uebergabe von Adressdaten, 
                                    iovec-Information und
                                    Steuerdaten
    Solaris-Standarddefinition:
     struct msghdr {
      void *    msg_name;      fuer Adressdaten
      socklen_t msg_namelen;   Adresslaenge
      struct iovec * msg_iov;  Adresse iovec-Vektor
      int         msg_iovlen;  Anzahl Elemente in msg_iov
      caddr_t  msg_accrights;  fuer Adresse des Deskriptors
      int   msg_accrightslen;  Laenge des Deskriptors
     };


    Struktur nach Posix (Linux-Standard):
     struct msghdr {
      void *    msg_name;      fuer Adressdaten
      socklen_t msg_namelen;   Adresslaenge
      struct iovec * msg_iov;  Adresse iovec-Vektor
      int         msg_iovlen;  Anzahl Elemente in msg_iov
      void *     msg_control;  Adresse der Steuerdatenstruktur
      socklen_t msg_controllen;  Laenge der Steuerdaten
      int          msg_flags;  nur Rueckgabe von Flags bei
     };                        recvmsg()

   struct cmsghdr: Steuerdaten-Struktur fuer Headerinformation
    (nur fuer Posix-Variante)
    struct cmsghdr {
     socklen_t cmsg_len;  Laenge der Steuerdaten einschliesslich
                          Header
     int cmsg_level;      Socket-Optionscode
     int cmsg_type;       auszufuehrende Operation
    };
    Im Anschluss an diesen Header wird der Deskriptor 
    eingetragen.

3. Nachricht und Deskriptor senden und empfangen ueber 
   SOCK_STREAM-Sockets
   Sockets erzeugen, Client und Server initialisieren 
   siehe Sockstream.txt

   weitere benoetigte Variablen:
    int fd, *p;           fuer Deskriptor
    struct msghdr mh;
    struct cmsghdr *cmp;  fuer Zugriff auf Steuerdaten
    union {               fuer Deskriptor-Bereich und
     struct cmsghdr cm;   Ausrichtung auf integrale Grenzen
     char ctrl[sizeof(struct cmsghdr) + sizeof(int)];
    } ctrlu;
    struct iovec iov[1];  Elementanzahl entsprechend der
                          Anzahl der E/A-Bereiche
    char eab[LEN];        E/A-Bereich der Laenge LEN
    int flags = 0;        ohne Flags

   Struktur mh initialisieren:
    mh.msg_name    = NULL;  bei SOCK_STREAM nicht benutzt
    mh.msg_namelen = 0;
    mh.msg_iov     = iov;   E/A-Vektor mit
    mh.msg_iovlen  = 1;     1 Element
   Steuerdaten nach Solaris-Standard:
    mh.msg_accrights    = (char *)&fd;  Deskriptor-Adresse
    mh.msg_accrightslen = sizeof(int);  Deskriptor-Laenge
   Steuerdaten nach Posix:
    mh.msg_control    = ctrlu.ctrl;    Adresse der Steuerdaten
    mh.msg_controllen = sizeof(ctrlu); Laenge der Steuerdaten
    mh.msg_flags      = 0;
   Struktur iov initialisieren:
    iov[0].iov_base = eab;  Adresse E/A-Bereich
    iov[0].iov_len  = len;  Laenge des E-Bereichs bzw.
                                   der A-Daten

   Nachricht und Deskriptor senden:
    Daten in eab eintragen und Deskriptor oeffnen
    Posix-Variante: Headerinformation und geoeffneten 
     Deskriptor in Steuerdaten-Struktur eintragen (Zugriff 
     ueber Makros):
     cmp = CMSG_FIRSTHDR (&mh);  Adresse Steuerdaten-Struktur
     cmp->cmsg_len   = sizeof(ctrlu);  Laenge der Steuerdaten
     cmp->cmsg_level = SOL_SOCKET; Socket-Option
     cmp->cmsg_type  = SCM_RIGHTS; Operation Deskriptor senden
     p   = (int *)CMSG_DATA (cmp);  Adresse Steuerdatenbereich
     *p  = fd;  Deskriptor in Steuerdatenbereich eintragen
    Daten und Deskriptor senden:
     rc = sendmsg (sockd, &mh, flags);
        rc > 0   gesendete Byteanzahl
        rc < 0   bei Fehler

   Nachricht und Deskriptor empfangen:
    rc = recvmsg (sockd, &mh, flags);
       rc > 0   empfangene Byteanzahl
       rc < 0   bei Fehler
       rc == 0  EOF-Bedingung; Socket wurde auf der Gegenseite
                geschlossen
    Posix-Variante: Deskriptor aus Steuerdaten-Struktur 
     entnehmen (Zugriff ueber Makros):
     cmp = CMSG_FIRSTHDR (&mh);  Adresse Steuerdaten-Struktur
     p   = (int *)CMSG_DATA (cmp);  Adresse Steuerdatenbereich
     fd  = *p;
    empfangener Deskriptor ist bereits geoeffnet und 
    kann benutzt werden

4. Nachricht und Deskriptor senden und empfangen ueber 
   SOCK_DGRAM-Sockets
   Sockets erzeugen, Client und Server initialisieren 
   siehe Sockdgram.txt

   weitere benoetigte Variablen:
    int fd, *p;           fuer Deskriptor
    struct msghdr mh;
    struct cmsghdr *cmp;  fuer Zugriff auf Steuerdaten
    union {               fuer Deskriptor-Bereich und
     struct cmsghdr cm;   Ausrichtung auf integrale Grenzen
     char ctrl[sizeof(struct cmsghdr) + sizeof(int)];
    } ctrlu;
    struct iovec iov[1];  Elementanzahl entsprechend der
                          Anzahl der E/A-Bereiche
    char eab[LEN];        E/A-Bereich der Laenge LEN
    int flags = 0;        ohne Flags

   Struktur mh initialisieren:
   fuer Client:
    mh.msg_name    = (char *)&server;  
    mh.msg_namelen = sizeof(server);
   fuer Server:
    mh.msg_name    = (char *)&client;  
    mh.msg_namelen = sizeof(client);
   fuer Client und Server:
    mh.msg_iov     = iov;   E/A-Vektor mit
    mh.msg_iovlen  = 1;     1 Element
   Steuerdaten-Komponenten nach Solaris-Standard:
    mh.msg_accrights    = (char *)&fd;  Deskriptor-Adresse
    mh.msg_accrightslen = sizeof(int);  Deskriptor-Laenge
   Steuerdaten-Komponenten nach Posix:
    mh.msg_control    = ctrlu.ctrl;    Adresse der Steuerdaten
    mh.msg_controllen = sizeof(ctrlu); Laenge der Steuerdaten
    mh.msg_flags      = 0;

   Struktur iov initialisieren:
    iov[0].iov_base = eab;  Adresse E/A-Bereich
    iov[0].iov_len  = len;  Laenge des E-Bereichs bzw.
                                   der A-Daten

   Nachricht und Deskriptor senden:
    Daten in eab eintragen und Deskriptor oeffnen
    Posix-Variante: Headerinformation und geoeffneten 
     Deskriptor in Steuerdaten-Struktur eintragen (Zugriff 
     ueber Makros):
     cmp = CMSG_FIRSTHDR (&mh);  Adresse Steuerdaten-Struktur
     cmp->cmsg_len   = sizeof(ctrlu);  Laenge der Steuerdaten
     cmp->cmsg_level = SOL_SOCKET; Socket-Option
     cmp->cmsg_type  = SCM_RIGHTS; Operation Deskriptor senden
     p   = (int *)CMSG_DATA (cmp);  Adresse Steuerdatenbereich
     *p  = fd;  Deskriptor in Steuerdatenbereich eintragen
    Daten und Deskriptor senden:
     rc = sendmsg (sockd, &mh, flags);
        rc > 0   gesendete Byteanzahl
        rc < 0   bei Fehler

   Nachricht und Deskriptor empfangen:
    rc = recvmsg (sockd, &mh, flags);
       rc > 0   empfangene Byteanzahl
       rc < 0   bei Fehler
    Posix-Variante: Deskriptor aus Steuerdaten-Struktur 
     entnehmen(Zugriff ueber Makros):
     cmp = CMSG_FIRSTHDR (&mh);  Adresse Steuerdaten-Struktur
     p   = (int *)CMSG_DATA (cmp);  Adresse Steuerdatenbereich
     fd  = *p;
    empfangener Deskriptor ist bereits geoeffnet und 
    kann benutzt werden

